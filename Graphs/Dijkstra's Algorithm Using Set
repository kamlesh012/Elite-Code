 vector <int> dijkstra(int V, vector<vector<int>> adj[], int s)
    {
        //Dijkstra's Algorithm Using Set Data Structure
        //to save on some excessive visits
        
        set<pair<int,int>> st;
        vector<int> dist(V+1,1e5);
        dist[s]=0;
        st.insert({0,s});
        
        while(!st.empty()){
            
            int dst=st.begin()->first;
            int node=st.begin()->second;
            st.erase(st.begin());
            
            for(auto adjnode:adj[node]){
                
                int curr=adjnode[0];
                int wt=adjnode[1];
                if(dist[curr]>dist[node]+wt){
                    
                    //This is what I did differently
                    //CHecked if curr's dist & curr already existed in set
                    //which means there is somepath that is having greater distance
                    //to source,so we will remove it
                    
                    // if(st.find({dist[curr],curr})!=st.end()){
                    //     st.erase({dist[curr],curr}); 
                    // }
                    
                    //This is what Striver Did.
                    
                    //if(dist[curr]!=1e5)st.erase({dist[curr],curr}); 
                    
                    //Both WOrk FIne
                    
                    dist[curr]=dist[node]+wt;
                    st.insert({dist[curr],curr});
                }
            }
        }
        return dist;
    }
